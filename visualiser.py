from PIL import Image, ImageDraw, ImageShow
import sys
import math

# camspot = (-1742.287476, 784.993713)
tl = (-1841, 3618.65)
br = (2773.63, -805.326,12)
tlm = (0, 0)
brm = (935, 918)

def mapp(point):
    xdist = br[0] - tl[0]
    xdistM = point[0] - tl[0]
    xp = xdistM / xdist * brm[0]
    
    ydist = br[1] - tl[1]
    ydistM = point[1] - tl[1]
    yp = ydistM / ydist * brm[1]

    return (xp, yp)

fo = open(".\\testfiles\\css1.txt", "r")
fo2 = open(".\\testfiles\\csrs1.txt", "r")
fo.readline()
cc = 0
while cc < 1200:
    print(cc)
    cc += 1
    cs = fo.readline()
    INFO = fo2.readline()
    k = cs.split(",")
    camspot = (float(k[0]), float(k[1]))

    with Image.open("dirty.png") as im:

        draw = ImageDraw.Draw(im)
        # INFO = "-1742.287354,800.993713,-1741.728760,800.993713,-1741.168213,800.993713,-1740.605713,800.993713,-1740.039307,800.993713,-1739.467041,800.993713,-1738.886963,800.993713,-1738.299072,800.993713,-1737.699463,800.993713,-1737.088135,800.993713,-1736.463135,800.993713,-1735.822510,800.993713,-1735.164307,800.993713,-1734.482666,800.993713,-1733.779541,800.993713,-1733.049072,800.993713,-1732.289307,800.993713,-1731.494385,800.993713,-1730.662354,800.993713,-1729.787354,800.993713,-1728.861572,800.993713,-1727.881104,800.993713,-1726.836182,800.993713,-1750.287354,777.268127,-1750.287354,777.790588,-1750.287354,778.280823,-1750.287354,778.743225,-1750.287354,779.181213,-1750.287354,779.597717,-1750.287354,779.994690,-1750.287354,780.375061,-1750.287354,780.739807,-1750.287354,781.091858,-1750.287354,781.431702,-1750.287354,781.761292,-1750.287354,782.082092,-1750.287354,782.394592,-1750.287354,782.699768,-1750.287354,782.999084,-1750.287354,783.293030,-1750.287354,783.583069,-1750.287354,783.869202,-1750.287354,784.152893,-1750.287354,784.434143,-1750.287354,784.714417,-1750.287354,784.993713,-1750.287354,785.273010,-1750.287354,785.553284,-1750.287354,785.834534,-1750.287354,786.118225,-1750.287354,786.404358,-1750.287354,786.694397,-1750.287354,786.988342,-1750.287354,787.287659,-1750.287354,787.592834,-1750.287354,787.905334,-1750.287354,788.226135,-1750.287354,788.555725,-1750.287354,788.895569,-1750.287354,789.247620,-1750.287354,789.612366,-1750.287354,789.992737,-1750.287354,790.389709,-1750.287354,790.806213,-1750.287354,791.244202,-1750.287354,791.706604,-1750.287354,792.196838,-1750.287354,792.719299,-1399.464478,429.993713,-1399.238525,403.993713,-1399.929932,376.993713,-1399.318604,345.993713,-1399.349854,312.993713,-1313.941406,149.993713,-1345.489868,149.993713,-1375.643066,149.993713,-1404.633545,149.993713,-1424.734131,133.993713,-1426.202148,74.993713,-1449.753174,60.993713,-1465.636963,24.993713,-1430.334229,-175.006287,-1725.082764,724.993713,-1727.331299,724.993713,-1729.535889,724.993713,-1731.711182,724.993713,-1733.857178,724.993713,-1735.981201,724.993713,-1738.090576,724.993713,-1740.192627,724.993713,-1742.287354,724.993713,-1744.382080,724.993713,-1746.484131,724.993713,-1748.593506,724.993713,-1750.015015,729.993713,-1750.043213,740.993713,-1750.150757,747.993713,-1750.014648,753.993713,-1750.029419,757.993713,-1750.086182,760.993713,-1750.295654,762.993713,-1750.368408,764.993713,-1750.300781,766.993713,-1750.092041,768.993713,-1750.263428,769.993713,-1750.370850,770.993713,-1750.410767,771.993713,-1750.382080,772.993713,-1750.279541,773.993713,-1750.099854,774.993713,-1750.678467,774.993713,-1750.390869,775.993713,-1750.012939,776.993713,-1726.287354,800.444885,-1725.287354,800.300354,-1694.287354,825.271057,-1690.287354,825.621887,-1686.287354,825.681213,-1682.287354,825.463684,-1677.287354,825.610779,-1672.287354,825.406921,-1666.287354,825.405823,-1659.287354,825.475464,-1652.287354,825.066345,-1519.287354,875.097473,-1494.287354,875.253967,-1464.287354,875.313171,-1428.287354,875.031067,-1399.287354,870.513428,-1399.287354,857.910522,-1399.287354,845.475098,-1399.287354,833.207153,-1399.287354,821.043884,-1399.287354,808.985291,-1399.287354,796.968567,-1399.287354,784.993713,-1399.287354,773.018860,-1399.287354,761.002136,-1399.287354,748.943542,-1399.287354,736.780273,-1399.287354,724.512329,-1399.287354,712.076904,-1399.287354,699.473999,-1399.287354,686.640808,-1399.287354,673.556396,-1399.287354,660.157959,-1407.287354,649.636047,-1424.287354,643.403748,-1424.287354,629.894958,-1424.287354,615.900940,-1424.287354,601.402283,-1424.287354,586.282532,-1424.287354,570.502869,-1424.287354,553.946838,-1424.287354,536.536804,-1424.287354,518.156311,-1424.287354,498.669495,-1424.287354,477.901672,-1750.012939,792.993713,-1750.390869,793.993713,-1750.678467,794.993713,-1750.099854,794.993713,-1750.279541,795.993713,-1750.382080,796.993713,-1750.410767,797.993713,-1750.370850,798.993713,-1750.263428,799.993713,-1750.092041,800.993713,-1749.410400,800.993713,-1748.752197,800.993713,-1748.111572,800.993713,-1747.486572,800.993713,-1746.875244,800.993713,-1746.275635,800.993713,-1745.687744,800.993713,-1745.107666,800.993713,-1744.535400,800.993713,-1743.968994,800.993713,-1743.406494,800.993713,-1742.845947,800.993713"
        l = INFO.split(",")
        newl = []
        count = 0
        for x in range(math.floor(len(l)/2)):
            count += 1
            newl.append(mapp((float(l[2*x]), float(l[2*x+1]))))
        
        # print(count)

        for el in newl:
            draw.ellipse([el[0]-3, el[1]-3, el[0]+3, el[1]+3], fill=(255,0,0), width=3)
            # draw.line((0, 0) + im.size, fill=128)
            # draw.line((0, im.size[1], im.size[0], 0), fill=128)
        
        csm = mapp(camspot)
        draw.ellipse([csm[0]-3, csm[1]-3, csm[0]+3, csm[1]+3], fill=(255,0,255), width=5)
            
        # im.save(sys.stdout, "PNG")
        if cc % 100 == 0:
            ImageShow.show(im)
            input()
    

# newp = mapp((1, 2))
# print(newp[0], newp[1])